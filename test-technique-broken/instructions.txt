Checking the Tests for TechnicalService
We need to verify that the tests are working correctly, starting with those related to TechnicalService.

Step 1: Understanding the Environment Variable
In the docker-compose.yml file, we have an environment variable defined as:

yaml
Copier
Modifier
environment:
  - IS_DOCKER=1
This variable is used in our tests to ensure that the application correctly detects if it is running inside a Docker container.

Step 2: Examining the Test
We have a test case in TechnicalTest that checks whether the is_docker parameter is correctly set:

php
Copier
Modifier
class TechnicalTest extends KernelTestCase
{
    public function testEnvDocker(): void
    {
        self::bootKernel();

        $isDocker = static::getContainer()->getParameter('is_docker');

        $this->assertTrue($isDocker);
    }
}
This test ensures that the is_docker parameter is correctly recognized within the Symfony application.

Step 3: Running the Test
To run this test, follow these steps:

Ensure Docker is running
If Docker is not already running, start it:

sh
Copier
Modifier
sudo systemctl start docker
Start the application using Docker Compose

sh
Copier
Modifier
sudo docker compose up -d
Run the PHPUnit test for TechnicalService
Inside the Docker container, execute:

sh
Copier
Modifier
docker exec -it <container_name> php bin/phpunit --filter TechnicalTest
(Replace <container_name> with the actual name of the container running your application.)

Verify the test result

✅ If the test passes, the is_docker parameter is correctly set.
❌ If the test fails, we need to debug whether IS_DOCKER=1 is properly loaded in Symfony.
Next Steps
If this test passes, we will proceed with verifying additional tests in TechnicalService. If it fails, we will investigate whether the environment variable is properly loaded and recognized within Symfony.

